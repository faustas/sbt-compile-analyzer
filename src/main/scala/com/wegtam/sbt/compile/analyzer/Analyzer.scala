/*
 * Copyright (C) 2017  André Schütz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.wegtam.sbt.compile.analyzer

import com.wegtam.sbt.compile.analyzer.adt.ScalacPhaseName.Loader
import com.wegtam.sbt.compile.analyzer.adt.ScalacPhaseValue.ScalacPhaseValueLoader
import com.wegtam.sbt.compile.analyzer.adt.{ ScalacPhase, ScalacPhaseName }

import scala.io.Source
import scala.util.matching.Regex

/**
  * This program allows the extraction of compiler information for the
  * single phases of the `scalac` compilation process. Therefore, the
  * program needs the information that is generated by the `scalac` compiler
  * during its compilation of a software program.
  *
  * The content of the data file consists of the `scalac` compiler information
  * that can be generated in the following manner.
  *
  * Add the following `scalac` compiler option to the build.sbt:
  * `scalacOptions ++= Seq("-verbose")`
  *
  * Run the compilation of your project and generate the data file:
  * `sbt clean compile > data-file.txt`
  *
  * Switch to this project and execute one of the following commands:
  *
  * `
  *  sbt
  *  run absolute/path/to/data/file.txt
  * `
  * or
  *
  * `sbt "runMain Analyzer absolute/path/to/data/file.txt"`
  */
object Analyzer {

  /**
    * Main entry point for the program.
    *
    * @param args The arguments that can be provided during runtime.
    */
  def main(args: Array[String]): Unit = {
    // The provided filepath to the data file
    // Yes, there is no check for non-existence :-)
    val fp = args(0)

    val phases = Analyzer(fp).analyze()
    Helper.print(phases)
  }
}

/**
  * This class provides functionality to extract the information from
  * the provided data file.
  *
  * @param filepath The path to the data file.
  */
final case class Analyzer(filepath: String) {

  /**
    * Start the analysis process and return the extracted information
    * for the single phases.
    *
    * @return Sequence of information for the single phases.
    */
  def analyze(): Seq[ScalacPhase] = {
    val lines = readFile()
    phases(lines)
  }

  /**
    * Create the information for the single phases that can be
    * extracted from the content of the data file.
    *
    * @param lines  The raw lines of the data file.
    * @return Sequence of phase information that could be extracted.
    */
  def phases(lines: Seq[String]): Seq[ScalacPhase] = {
    // Loader
    val loaderValuesRegex: Regex = ".*\\[loaded (\\w+) (\\w+) (.*) in (\\d+)ms].*".r
    val lvr: Seq[ScalacPhaseValueLoader] = lines.flatMap {
      case loaderValuesRegex(desc1, desc2, value, took) =>
        Option(ScalacPhaseValueLoader(desc1, desc2, value, took.toLong))
      case _ => None
    }
    val loaderPhase = ScalacPhase(
      ScalacPhaseName.phaseId(Loader).getOrElse(-1),
      Loader,
      -1L,
      lvr
    )

    // load all phases
    val allPhasesRegex: Regex = ".*\\[(\\w+) in (\\d+)ms\\].*".r
    val phases: Seq[ScalacPhase] = lines.flatMap {
      case allPhasesRegex(phase, took) =>
        ScalacPhaseName
          .valueOf(phase)
          .fold[Option[ScalacPhase]](None)(
            p =>
              Option(
                ScalacPhase(ScalacPhaseName.phaseId(p).getOrElse(-1), p, took.toLong, Seq.empty)
            )
          )
      case _ => None
    }

    phases ++ Seq(loaderPhase)
  }

  /**
    * Read the file and return a sequence of the contained lines.
    * @return Sequence of the file content
    */
  def readFile(): Seq[String] = Source.fromFile(filepath).getLines().toSeq
}
